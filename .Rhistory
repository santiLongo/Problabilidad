knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(dplyr)
library(tidyverse)
library(DT)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(ggthemes)  # estilos de gráficos
library(ggrepel)   # etiquetas de texto más prolijas que las de ggplot
library(scales)    # tiene la función 'percent()'
library(gganimate) # Para hacer gráficos animados.
library(ggridges) # Para hacer gráficos de densidad faceteados
library(GGally) # Para hacer varios gráficos juntos.
library(cowplot)  #Para unir gráficos generados por ggplot2
library(forcats)  #Para reordenar factores
library(pyramid) # para pirámide poblacional
library(ggcorrplot) # para correlogramas
library(AER) # para datos
library(hexbin) # para grafico de dispersión con intesidad por color
library(wordcloud) #Nube de palabras
library(RColorBrewer)
library(wordcloud2)
datos <- read.csv("Morning_Routine_Productivity_Dataset.csv")
datos
datos %>%
filter(Exercise..mins. > 30) %>%
arrange(Exercise..mins.)
data <- datos %>%
count(Breakfast.Type)
data
data <- datos %>%
count(Breakfast.Type)
pie(data$n,
labels = data$Breakfast.Type,
main = "Tipos de Desayunos")
data <- datos %>%
count(Favourite.Exercise)
wordcloud2(
data=data, size = 0.4, shape = "star"
)
x <- datos$Exercise..mins.
# Histograma de densidad
hist(x, breaks = 20, probability = TRUE,
main = "Distribución de minutos de ejercicio",
xlab = "Exercise (mins)", col = "lightgray")
# Agregar la curva normal ajustada
curve(dnorm(x, mean = mean(x, na.rm = TRUE), sd = sd(x, na.rm = TRUE)),
col = "blue", lwd = 2, add = TRUE)
ggplot(datos, aes(x = Mood, y = Exercise..mins., fill = Mood)) +
geom_violin(trim = FALSE) +  # Muestra la densidad de los datos
labs(title = "Distribución de minutos de ejercicio por estado de ánimo",
x = "Estado de Ánimo",
y = "Minutos de Ejercicio") +
theme_minimal()
data <- datos %>%
group_by(Sleep.Duration..hrs.) %>%
summarise(promedio_productividad = mean(Productivity.Score..1.10., na.rm = TRUE))
ggplot(data, aes(x = Sleep.Duration..hrs., y = promedio_productividad)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Productividad promedio por horas de suenio",
x = "Horas de suenio",
y = "Productividad promedia"
) +
theme_minimal()
data <- datos %>%
count(Favourite.Exercise)
wordcloud2(
data=data, size = 0.4, shape = "circle"
)
hsize <- 3.5
data <- datos %>%
mutate(x = hsize)
ggplot(data, aes(x = hsize, y = value, fill = group)) +
geom_col() +
geom_text(aes(label = value),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
xlim(c(0.2, hsize + 0.5))
data <- datos %>%
count(Favourite.Exercise)
wordcloud2(
data=data, size = 0.4, shape = "circle"
)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(dplyr)
library(tidyverse)
library(DT)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(ggthemes)  # estilos de gráficos
library(ggrepel)   # etiquetas de texto más prolijas que las de ggplot
library(scales)    # tiene la función 'percent()'
library(gganimate) # Para hacer gráficos animados.
library(ggridges) # Para hacer gráficos de densidad faceteados
library(GGally) # Para hacer varios gráficos juntos.
library(cowplot)  #Para unir gráficos generados por ggplot2
library(forcats)  #Para reordenar factores
library(pyramid) # para pirámide poblacional
library(ggcorrplot) # para correlogramas
library(AER) # para datos
library(hexbin) # para grafico de dispersión con intesidad por color
library(wordcloud) #Nube de palabras
library(RColorBrewer)
library(wordcloud2)
datos <- read.csv("Morning_Routine_Productivity_Dataset.csv")
datos
datos %>%
filter(Exercise..mins. > 30) %>%
arrange(Exercise..mins.)
data <- datos %>%
count(Breakfast.Type)
data
data <- datos %>%
count(Breakfast.Type)
pie(data$n,
labels = data$Breakfast.Type,
main = "Tipos de Desayunos")
hsize <- 3.5
data <- datos %>%
mutate(x = hsize)
ggplot(data, aes(x = hsize, y = value, fill = group)) +
geom_text(aes(label = value),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
xlim(c(0.2, hsize + 0.5))
hsize <- 3.5
data <- datos %>%
mutate(x = hsize)
ggplot(data, aes(x = hsize, y = value, fill = group)) +
geom_col() +
coord_polar(theta = "y") +
xlim(c(0.2, hsize + 0.5))
hsize <- 3.5
data <- datos %>%
mutate(x = hsize)
ggplot(data, aes(x = hsize, y = Date, fill = group)) +
geom_col() +
geom_text(aes(label = value),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
xlim(c(0.2, hsize + 0.5))
hsize <- 3.5
data <- datos %>%
mutate(x = hsize)
ggplot(data, aes(x = hsize, y = Date, fill = Date)) +
geom_col() +
geom_text(aes(label = value),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
xlim(c(0.2, hsize + 0.5))
hsize <- 3.5
data <- datos %>%
mutate(x = hsize)
ggplot(data, aes(x = hsize, y = Date, fill = Date)) +
geom_col() +
geom_text(aes(label = date),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
xlim(c(0.2, hsize + 0.5))
data <- datos %>%
group_by(Sleep.Duration..hrs.) %>%
summarise(promedio_productividad = mean(Productivity.Score..1.10., na.rm = TRUE))
ggplot(data, aes(x = Sleep.Duration..hrs., y = promedio_productividad)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Productividad promedio por horas de suenio",
x = "Horas de suenio",
y = "Productividad promedia"
) +
theme_minimal()
data <- datos %>%
group_by(Sleep.Duration..hrs.) %>%
summarise(promedio_productividad = mean(Productivity.Score..1.10., na.rm = TRUE))
ggplot(data, aes(x = Sleep.Duration..hrs., y = promedio_productividad)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Productividad promedio por horas de suenio",
x = "Horas de suenio",
y = "Productividad promedia"
) +
theme_minimal()
ggplot(datos, aes(x = Mood, y = Exercise..mins., fill = Mood)) +
geom_violin(trim = FALSE) +  # Muestra la densidad de los datos
labs(title = "Distribución de minutos de ejercicio por estado de ánimo",
x = "Estado de Ánimo",
y = "Minutos de Ejercicio") +
theme_minimal()
x <- datos$Exercise..mins.
# Histograma de densidad
hist(x, breaks = 20, probability = TRUE,
main = "Distribución de minutos de ejercicio",
xlab = "Exercise (mins)", col = "lightgray")
# Agregar la curva normal ajustada
curve(dnorm(x, mean = mean(x, na.rm = TRUE), sd = sd(x, na.rm = TRUE)),
col = "blue", lwd = 2, add = TRUE)
