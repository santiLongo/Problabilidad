# Añadir un título
labs(title = "Distribucion de tipos de desayuno")
# Mostrar el gráfico
print(grafico_dona)
data <- datos%>%
count(Favourite.Exercise)
wordcloud2(
data=data, size = 0.4
)
x <- datos$Exercise..mins.
# Histograma de densidad
hist(x, breaks = 20, probability = TRUE,
main = "Distribucion de minutos de ejercicio",
xlab = "Exercise (mins)", col = "lightgray")
# Agregar la curva normal ajustada
curve(dnorm(x, mean = mean(x, na.rm = TRUE), sd = sd(x, na.rm = TRUE)),
col = "blue", lwd = 2, add = TRUE)
ggplot(datos, aes(x = Mood, y = Exercise..mins., fill = Mood)) +
geom_violin(trim = FALSE) +  # Muestra la densidad de los datos
labs(title = "Distribucion de minutos de ejercicio por estado de animo",
x = "Estado de Animo",
y = "Minutos de Ejercicio") +
theme_minimal()
data <- datos %>%
group_by(Sleep.Duration..hrs.) %>%
summarise(promedio_productividad = mean(Productivity.Score..1.10., na.rm = TRUE))
ggplot(data, aes(x = Sleep.Duration..hrs., y = promedio_productividad)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Productividad promedio por horas de sueño",
x = "Horas de sueño",
data <- datos %>%
group_by(Sleep.Duration..hrs.) %>%
summarise(promedio_productividad = mean(Productivity.Score..1.10., na.rm = TRUE))
ggplot(data, aes(x = Sleep.Duration..hrs., y = promedio_productividad)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Productividad promedio por horas de suenio",
x = "Horas de suenio",
y = "Productividad promedia"
) +
theme_minimal()
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(dplyr)
library(tidyverse)
library(DT)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(ggthemes)  # estilos de gráficos
library(ggrepel)   # etiquetas de texto más prolijas que las de ggplot
library(scales)    # tiene la función 'percent()'
library(gganimate) # Para hacer gráficos animados.
library(ggridges) # Para hacer gráficos de densidad faceteados
library(GGally) # Para hacer varios gráficos juntos.
library(cowplot)  #Para unir gráficos generados por ggplot2
library(forcats)  #Para reordenar factores
library(pyramid) # para pirámide poblacional
library(ggcorrplot) # para correlogramas
library(AER) # para datos
library(hexbin) # para grafico de dispersión con intesidad por color
library(wordcloud) #Nube de palabras
library(RColorBrewer)
library(wordcloud2)
datos <- read.csv("Morning_Routine_Productivity_Dataset.csv")
datos_dona <- datos %>%
group_by(Breakfast.Type) %>%
summarise(valor = n()) %>%
ungroup()
datos_dona <- datos_dona %>%
mutate(
porcentaje = valor / sum(valor),
etiqueta = paste0(round(porcentaje * 100), "%"),
posicion = cumsum(porcentaje) - porcentaje / 2
)
tamano_agujero <- 4
datos_dona <- datos_dona %>%
mutate(x = tamano_agujero)
grafico_dona <- ggplot(datos_dona, aes(x = tamano_agujero, y = valor, fill = Breakfast.Type)) +
# Crear las barras (segmentos de la dona)
geom_col(width = 1, color = "white") +
# Transformar a coordenadas polares
coord_polar(theta = "y") +
# Agregar las etiquetas de porcentaje
geom_text(aes(x = tamano_agujero * 1.3, y = cumsum(valor) - valor / 2, label = etiqueta), size = 5) +
# Limitar el eje x para crear el agujero
xlim(c(0.2, tamano_agujero + 0.5)) +
# Mejorar el tema y quitar elementos innecesarios
theme_void() +
theme(
legend.position = "right",
legend.text = element_text(size = 12),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)
) +
# Añadir un título
labs(title = "Distribucion de tipos de desayuno")
# Mostrar el gráfico
print(grafico_dona)
data <- datos%>%
count(Favourite.Exercise)
wordcloud2(
data=data, size = 0.4
)
x <- datos$Exercise..mins.
# Histograma de densidad
hist(x, breaks = 20, probability = TRUE,
main = "Distribucion de minutos de ejercicio",
xlab = "Exercise (mins)", col = "lightgray")
# Agregar la curva normal ajustada
curve(dnorm(x, mean = mean(x, na.rm = TRUE), sd = sd(x, na.rm = TRUE)),
col = "blue", lwd = 2, add = TRUE)
ggplot(datos, aes(x = Mood, y = Exercise..mins., fill = Mood)) +
geom_violin(trim = FALSE) +  # Muestra la densidad de los datos
labs(title = "Distribucion de minutos de ejercicio por estado de animo",
x = "Estado de Animo",
y = "Minutos de Ejercicio") +
theme_minimal()
data <- datos %>%
group_by(Sleep.Duration..hrs.) %>%
summarise(promedio_productividad = mean(Productivity.Score..1.10., na.rm = TRUE))
ggplot(data, aes(x = Sleep.Duration..hrs., y = promedio_productividad)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Productividad promedio por horas de suenio",
x = "Horas de suenio",
y = "Productividad promedia"
) +
theme_minimal()
ggplot(datos, aes(x = Mood, y = Exercise..mins., fill = Mood)) +
geom_violin(trim = FALSE) +  # Muestra la densidad de los datos
labs(title = "Distribucion de minutos de ejercicio por estado de animo",
x = "Estado de Animo",
y = "Minutos de Ejercicio") +
theme_minimal()
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(dplyr)
library(tidyverse)
library(DT)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(ggthemes)  # estilos de gráficos
library(ggrepel)   # etiquetas de texto más prolijas que las de ggplot
library(scales)    # tiene la función 'percent()'
library(gganimate) # Para hacer gráficos animados.
library(ggridges) # Para hacer gráficos de densidad faceteados
library(GGally) # Para hacer varios gráficos juntos.
library(cowplot)  #Para unir gráficos generados por ggplot2
library(forcats)  #Para reordenar factores
library(pyramid) # para pirámide poblacional
library(ggcorrplot) # para correlogramas
library(AER) # para datos
library(hexbin) # para grafico de dispersión con intesidad por color
library(wordcloud) #Nube de palabras
library(RColorBrewer)
library(wordcloud2)
datos <- read.csv("Morning_Routine_Productivity_Dataset.csv")
datos_dona <- datos %>%
group_by(Breakfast.Type) %>%
summarise(valor = n()) %>%
ungroup()
datos_dona <- datos_dona %>%
mutate(
porcentaje = valor / sum(valor),
etiqueta = paste0(round(porcentaje * 100), "%"),
posicion = cumsum(porcentaje) - porcentaje / 2
)
tamano_agujero <- 4
datos_dona <- datos_dona %>%
mutate(x = tamano_agujero)
grafico_dona <- ggplot(datos_dona, aes(x = tamano_agujero, y = valor, fill = Breakfast.Type)) +
# Crear las barras (segmentos de la dona)
geom_col(width = 1, color = "white") +
# Transformar a coordenadas polares
coord_polar(theta = "y") +
# Agregar las etiquetas de porcentaje
geom_text(aes(x = tamano_agujero * 1.3, y = cumsum(valor) - valor / 2, label = etiqueta), size = 5) +
# Limitar el eje x para crear el agujero
xlim(c(0.2, tamano_agujero + 0.5)) +
# Mejorar el tema y quitar elementos innecesarios
theme_void() +
theme(
legend.position = "right",
legend.text = element_text(size = 12),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)
) +
# Añadir un título
labs(title = "Distribucion de tipos de desayuno")
# Mostrar el gráfico
print(grafico_dona)
data <- datos%>%
count(Favourite.Exercise)
wordcloud2(
data=data, size = 0.4
)
x <- datos$Exercise..mins.
# Histograma de densidad
hist(x, breaks = 20, probability = TRUE,
main = "Distribucion de minutos de ejercicio",
xlab = "Exercise (mins)", col = "lightgray")
# Agregar la curva normal ajustada
curve(dnorm(x, mean = mean(x, na.rm = TRUE), sd = sd(x, na.rm = TRUE)),
col = "blue", lwd = 2, add = TRUE)
ggplot(datos, aes(x = Mood, y = Exercise..mins., fill = Mood)) +
geom_violin(trim = FALSE) +  # Muestra la densidad de los datos
labs(title = "Distribucion de minutos de ejercicio por estado de animo",
x = "Estado de Animo",
y = "Minutos de Ejercicio") +
theme_minimal()
data <- datos %>%
group_by(Sleep.Duration..hrs.) %>%
summarise(promedio_productividad = mean(Productivity.Score..1.10., na.rm = TRUE))
ggplot(data, aes(x = Sleep.Duration..hrs., y = promedio_productividad)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Productividad promedio por horas de suenio",
x = "Horas de suenio",
y = "Productividad promedia"
) +
theme_minimal()
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(dplyr)
library(tidyverse)
library(DT)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(ggthemes)  # estilos de gráficos
library(ggrepel)   # etiquetas de texto más prolijas que las de ggplot
library(scales)    # tiene la función 'percent()'
library(gganimate) # Para hacer gráficos animados.
library(ggridges) # Para hacer gráficos de densidad faceteados
library(GGally) # Para hacer varios gráficos juntos.
library(cowplot)  #Para unir gráficos generados por ggplot2
library(forcats)  #Para reordenar factores
library(pyramid) # para pirámide poblacional
library(ggcorrplot) # para correlogramas
library(AER) # para datos
library(hexbin) # para grafico de dispersión con intesidad por color
library(wordcloud) #Nube de palabras
library(RColorBrewer)
library(wordcloud2)
datos <- read.csv("Morning_Routine_Productivity_Dataset.csv")
datos_dona <- datos %>%
group_by(Breakfast.Type) %>%
summarise(valor = n()) %>%
ungroup()
datos_dona <- datos_dona %>%
mutate(
porcentaje = valor / sum(valor),
etiqueta = paste0(round(porcentaje * 100), "%"),
posicion = cumsum(porcentaje) - porcentaje / 2
)
tamano_agujero <- 4
datos_dona <- datos_dona %>%
mutate(x = tamano_agujero)
grafico_dona <- ggplot(datos_dona, aes(x = tamano_agujero, y = valor, fill = Breakfast.Type)) +
# Crear las barras (segmentos de la dona)
geom_col(width = 1, color = "white") +
# Transformar a coordenadas polares
coord_polar(theta = "y") +
# Agregar las etiquetas de porcentaje
geom_text(aes(x = tamano_agujero * 1.3, y = cumsum(valor) - valor / 2, label = etiqueta), size = 5) +
# Limitar el eje x para crear el agujero
xlim(c(0.2, tamano_agujero + 0.5)) +
# Mejorar el tema y quitar elementos innecesarios
theme_void() +
theme(
legend.position = "right",
legend.text = element_text(size = 12),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)
) +
# Añadir un título
labs(title = "Distribucion de tipos de desayuno")
# Mostrar el gráfico
print(grafico_dona)
data <- datos%>%
count(Favourite.Exercise)
wordcloud2(
data=data, size = 0.4
)
x <- datos$Exercise..mins.
# Histograma de densidad
hist(x, breaks = 20, probability = TRUE,
main = "Distribucion de minutos de ejercicio",
xlab = "Exercise (mins)", col = "lightgray")
# Agregar la curva normal ajustada
curve(dnorm(x, mean = mean(x, na.rm = TRUE), sd = sd(x, na.rm = TRUE)),
col = "blue", lwd = 2, add = TRUE)
ggplot(datos, aes(x = Mood, y = Exercise..mins., fill = Mood)) +
geom_violin(trim = FALSE) +  # Muestra la densidad de los datos
labs(title = "Distribucion de minutos de ejercicio por estado de animo",
x = "Estado de Animo",
y = "Minutos de Ejercicio") +
theme_minimal()
data <- datos %>%
group_by(Sleep.Duration..hrs.) %>%
summarise(promedio_productividad = mean(Productivity.Score..1.10., na.rm = TRUE))
ggplot(data, aes(x = Sleep.Duration..hrs., y = promedio_productividad)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Productividad promedio por horas de suenio",
x = "Horas de suenio",
y = "Productividad promedia"
) +
theme_minimal()
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(dplyr)
library(tidyverse)
library(DT)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(ggthemes)  # estilos de gráficos
library(ggrepel)   # etiquetas de texto más prolijas que las de ggplot
library(scales)    # tiene la función 'percent()'
library(gganimate) # Para hacer gráficos animados.
library(ggridges) # Para hacer gráficos de densidad faceteados
library(GGally) # Para hacer varios gráficos juntos.
library(cowplot)  #Para unir gráficos generados por ggplot2
library(forcats)  #Para reordenar factores
library(pyramid) # para pirámide poblacional
library(ggcorrplot) # para correlogramas
library(AER) # para datos
library(hexbin) # para grafico de dispersión con intesidad por color
library(wordcloud) #Nube de palabras
library(RColorBrewer)
library(wordcloud2)
datos <- read.csv("Morning_Routine_Productivity_Dataset.csv")
datos_dona <- datos %>%
group_by(Breakfast.Type) %>%
summarise(valor = n()) %>%
ungroup()
datos_dona <- datos_dona %>%
mutate(
porcentaje = valor / sum(valor),
etiqueta = paste0(round(porcentaje * 100), "%"),
posicion = cumsum(porcentaje) - porcentaje / 2
)
tamano_agujero <- 4
datos_dona <- datos_dona %>%
mutate(x = tamano_agujero)
grafico_dona <- ggplot(datos_dona, aes(x = tamano_agujero, y = valor, fill = Breakfast.Type)) +
# Crear las barras (segmentos de la dona)
geom_col(width = 1, color = "white") +
# Transformar a coordenadas polares
coord_polar(theta = "y") +
# Agregar las etiquetas de porcentaje
geom_text(aes(x = tamano_agujero * 1.3, y = cumsum(valor) - valor / 2, label = etiqueta), size = 5) +
# Limitar el eje x para crear el agujero
xlim(c(0.2, tamano_agujero + 0.5)) +
# Mejorar el tema y quitar elementos innecesarios
theme_void() +
theme(
legend.position = "right",
legend.text = element_text(size = 12),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)
) +
# Añadir un título
labs(title = "  Distribucion de tipos de desayuno")
# Mostrar el gráfico
print(grafico_dona)
data <- datos%>%
count(Favourite.Exercise)
wordcloud2(
data=data, size = 0.4
)
x <- datos$Exercise..mins.
# Histograma de densidad
hist(x, breaks = 20, probability = TRUE,
main = "Distribucion de minutos de ejercicio",
xlab = "Exercise (mins)", col = "lightgray")
# Agregar la curva normal ajustada
curve(dnorm(x, mean = mean(x, na.rm = TRUE), sd = sd(x, na.rm = TRUE)),
col = "blue", lwd = 2, add = TRUE)
ggplot(datos, aes(x = Mood, y = Exercise..mins., fill = Mood)) +
geom_violin(trim = FALSE) +  # Muestra la densidad de los datos
labs(title = "Distribucion de minutos de ejercicio por estado de animo",
x = "Estado de Animo",
y = "Minutos de Ejercicio") +
theme_minimal()
data <- datos %>%
group_by(Sleep.Duration..hrs.) %>%
summarise(promedio_productividad = mean(Productivity.Score..1.10., na.rm = TRUE))
ggplot(data, aes(x = Sleep.Duration..hrs., y = promedio_productividad)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(
title = "Productividad promedio por horas de suenio",
x = "Horas de suenio",
y = "Productividad promedia"
) +
theme_minimal()
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(dplyr)
library(tidyverse)
library(DT)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(ggthemes)  # estilos de graficos
library(ggrepel)   # etiquetas de texto mas prolijas que las de ggplot
library(scales)    # tiene la función 'percent()'
library(gganimate) # Para hacer graficos animados.
library(ggridges) # Para hacer graficos de densidad faceteados
library(GGally) # Para hacer varios graficos juntos.
library(cowplot)  #Para unir graficos generados por ggplot2
library(forcats)  #Para reordenar factores
library(pyramid) # para piramide poblacional
library(ggcorrplot) # para correlogramas
library(AER) # para datos
library(hexbin) # para grafico de dispersión con intesidad por color
library(wordcloud) #Nube de palabras
library(RColorBrewer)
library(wordcloud2)
datos <- read.csv("Morning_Routine_Productivity_Dataset.csv")
datos_dona <- datos %>%
group_by(Breakfast.Type) %>%
summarise(valor = n()) %>%
ungroup()
datos_dona <- datos_dona %>%
mutate(
porcentaje = valor / sum(valor),
etiqueta = paste0(round(porcentaje * 100), "%"),
posicion = cumsum(porcentaje) - porcentaje / 2
)
tamano_agujero <- 4
datos_dona <- datos_dona %>%
mutate(x = tamano_agujero)
grafico_dona <- ggplot(datos_dona, aes(x = tamano_agujero, y = valor, fill = Breakfast.Type)) +
# Crear las barras (segmentos de la dona)
geom_col(width = 1, color = "white") +
# Transformar a coordenadas polares
coord_polar(theta = "y") +
# Agregar las etiquetas de porcentaje
geom_text(aes(x = tamano_agujero * 1.3, y = cumsum(valor) - valor / 2, label = etiqueta), size = 5) +
# Limitar el eje x para crear el agujero
xlim(c(0.2, tamano_agujero + 0.5)) +
# Mejorar el tema y quitar elementos innecesarios
theme_void() +
theme(
legend.position = "right",
legend.text = element_text(size = 12),
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5, size = 18)
) +
# Añadir un título
labs(title = "  Distribucion de tipos de desayuno")
# Mostrar el grafico
print(grafico_dona)
data <- datos%>%
count(Favourite.Exercise)
wordcloud2(
data=data, size = 0.4
)
# Cargar la librería
library(ggridges)
# Cargar los datos
datos <- read.csv("Morning_Routine_Productivity_Dataset.csv")
# Crear el gráfico de crestas
ggplot(datos, aes(x = Productivity.Score..1.10., y = Breakfast.Type, fill = Breakfast.Type)) +
geom_density_ridges() +
labs(
title = "Distribución de la productividad por tipo de desayuno",
x = "Puntuación de productividad (1-10)",
y = "Tipo de desayuno"
) +
theme_minimal()
ggplot(datos, aes(x = Mood, y = Exercise..mins., fill = Mood)) +
geom_violin(trim = FALSE) +  # Muestra la densidad de los datos
labs(title = "Distribución de minutos de ejercicio por estado de animo",
x = "Estado de animo",
y = "Minutos de Ejercicio") +
theme_minimal()
correlacion <- cor(datos$Sleep.Duration..hrs., datos$Productivity.Score..1.10., use = "complete.obs", method = "pearson")
data <- datos %>%
group_by(Sleep.Duration..hrs.) %>%
summarise(promedio_productividad = mean(Productivity.Score..1.10., na.rm = TRUE))
ggplot(data, aes(x = Sleep.Duration..hrs., y = promedio_productividad)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
annotate("text",
x = max(data$Sleep.Duration..hrs.) * 0.6,
y = max(data$promedio_productividad) * 1,
label = paste("r =", round(correlacion, 5)),
size = 5,
color = "blue") +
labs(
title = "Productividad promedio por horas de suenio",
x = "Horas de suenio",
y = "Productividad promedia"
) +
theme_minimal()
